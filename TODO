TODO
------------------

FIRST RELEASE:
    - codice
        - * klog integration
        - * klog dump log program/function
        - * io_codec_add_tail, io_codec_add_head
        - * io_t codec chains support
        - * remove klone/src/libos (moved to libu)
        - * onthestack buffers for debug/logging procedures
        - * session.{encrypt|compress}
        - * klog_flush on timeout
        - * option to disable deflate'd transfers
        - * configurable max child number
        - * fork,prefork: max requests per process

        - chroot and syslog (/dev/log?)

        - blind chroot
        - bind sessions to client IP address

        - tweak prefork spawn-new-child-timeout 
        - fix prefork + log.klone

        - #ifndef HAVE_FORK



        - profiling
            + keep child to the smallest number to avoid loosing time into
              scheduler code
            + if a child takes more then X ms spawn a new child and set the
              slow child to die when it finishes

        - io_html_printf: html-encode before calling io_printf 

        - session_bin_set
        - no-cache header field on error pages

        - set_key.klone example page
        - default documentation embedded site

        - file upload?
        - keepalive requests?

        - security audit/todo
            - chroot("..."); chdir("/");
            - store sessions in a secure dir
            - disable core dumps?
            - check if output files are symlinks
            - last years apache security issues

        - scripts ulimit to limit memory/cpu?
        - line by line code inspection
        - copyright KL in tutti i file

        - klone && kloned usage() proofreading
        - klone and kloned man update

        - io_getc opt

        - configure
            + add -O2 to CFLAGS if not debugging
            + remove libcrypto to dep

        - user msg on translate error (include file not found, etc.)
        - user msg on config error (server_list missing, etc.)

        - testing & profiling
        - GPL header in autogen files
        - test CGI interface
        - Windows test
        - *bsd test
        - openssl come lib opzionale
        - "configure && make" automatico da klone/configure

        - sito embedded di default (nel tar.gz) con documentazione 
        - more request_ and response_ helper funcs (see jsp docs)
        - config param: server user/group owner
        - config param: server working directory (chroot)
        - fine-grained compiling: modularizzare le funzionalita' 
          per poterle escludere in fase di compilazione (#ifdef)
        - io_printf: aggiungere %e o %q per stampare stringhe dopo averle 
            html-encoded
        - security audit

    - documentazione:
        - kloned-sample.conf
        - sito sezione klone:
            + what is klone 
            + features
                = embedded static content (any file)
                = embedded C/C++ dynamic HTML pages
                = static content compression and encryption
                = dynamic page static chunk compression
                = server-side (in-memory and on file) and client-side sessions
                = easy C script programming interfaces <% code %>
                = ROMable binary
                = intellectual property protection
                = portable
                = ...
            + portability
            + license
            + support (free [mailing list] e commercial)
            + bug report
            + pricing
            + download 
            + online demo?
            + faq
            + API reference
            + tutorial
        - documentare il codice (doxygen)
            + API (src/libpage/* e src/libio/*) per i clienti

    - mailing list e/o forum
    - logo prodotto?


NEXT RELEASE(S):
    - file upload support (RFC1867) 
    - http/1.0: Basic Auth rfc1945:11  ??
    - HTTP/1.1 support (RFC2616)
    - funzione u_sendmail() o simili (drop-in nella spool o SMTP)
    - virtual host support (rfc2616.txt)
    - C++ support
    - scheduled pages retrival
      per eseguire degli script *.kl1 ogni N minuti/ore
    - predictable memory usage (dimensioni max dei buffer temporanei ecc.)

  win32:
    - use CGI interface as a workaround to missing fork() 
