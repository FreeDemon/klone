/*!
\page klone KLone Framework

\section klone1 Foreword
\par
KLone is a framework which allows the software developer to enhance the ease of use 
and the functionality of generic embedded systems, by specialising an end-user 
application with infrastructural services and communication protocols.
\par
An introductory description of the KLone framework follows.
This aims at giving a sufficient understanding of the
architecture and its underlying components, while introducing the KLone 
development interfaces.

\section klone2 Overview
\par
The KLone infrastructure aims at simplifying the development of end-user
applications for embedded systems with strong resource constraints. 
\par
The KLone architecture is also designed to simplify the extension of new interfaces
and multi-platform support.
\par
From the developer's point of view, this framework saves time and resources
significantly: the software designer can concentrate on adding new functionality
to the existing software without concerning himself with infrastructural
components.

\section klone3 Architecture
\par
The KLone framework consists of a set of basic components based on well-known <em>OO</em> design 
patterns, in order to meet the most appropriate and well-tested architecture for 
interactive applications.
\par
Basically, KLone implements a <em>Model View Controller</em> architectural pattern, and 
allows interaction with external clients providing services via different channels 
and protocols.
\par
\image html klone_arch.jpg "KLone Framework architecture"
\par
The resultant architecture shows clear separation between the software 
components that customise a context-specific application and the software 
components that manage the control and presentation of the application itself.
\par
The framework allows an external client to manage the application-specific data 
with different technologies (i.e. HTTP, HTTPS, TFTP, SMTP, etc.), without influencing
the basic functionalities.

\subsection klone4 KLone Controller
\par
The KLone Controller package implements the control logic of the application.
\par
The <b>server</b> object interacts with the external client, and according to the
<em>Reactor</em> design pattern, accepts and forwards the incoming requests to
the appropriate <b>backend</b> object. 
\par
The <b>configure</b> object specifies the complete list of <b>backend</b> 
objects that may be instantiated at run-time. At present, the only supported 
protocols are HTTP and HTTPS.
\par
Each <b>backend</b> object manages the request data from a specific channel,
transforming input data into the <em>business model</em>, according to the interface of the 
<b>io</b> object, and chooses the correct view as a <b>supplier</b> object, 
based on the <em>Strategy</em> design pattern.

\subsection klone5 KLone View
\par
The KLone View package implements the presentation logic of the application.
\par
The <b>supplier</b> object is responsible for managing the response of a specific 
channel, and interacts with the <em>business model</em> according to a simple 
<em>pull logic</em>. Since the appropriate <em>view</em> is built on demand, the 
<b>supplier</b> object is able to retrieve data from the <em>business model</em> 
every time it is invoked.

\subsection klone6 KLone Model
\par
The KLone Model package provides business domain services and allows access
to the persistent storage according to the <em>Facade</em> design pattern.
\par
Both <em>View</em> and <em>Controller</em> may send messages to the <b>io</b> object which in turn
will reply with appropriate responses. The <b>io</b> object provides the <em>View</em> and the 
<em>Controller</em> respectively with the functionality to access and update application-specific
data.




 










*/
