#!/bin/sh
#
# $Id: configure,v 1.38 2005/12/20 12:54:14 stewy Exp $

export makl_conf_h=klone_conf.h

# Be sure MAKL_DIR is there.
if [ -z "${MAKL_DIR}" ]; then
    echo "====================================================================="
    echo "  WARNING: it seems that MaKL is not configured in your environment. "
    echo "                                                                     "
    echo "  Perform the following simple steps, then reissue the configure     "
    echo "  command (substitute <GNUmake_cmd> with the GNU make system path).  "
    echo "                                                                     "
    echo "              $ cd makl/ && <GNUmake_cmd> hints                      "
    echo "                                                                     "
    echo "  Set the MAKL_DIR and MAKEFLAGS environment variables as suggested. "
    echo "  Consider doing this operation once for all by placing the MaKL     "
    echo "  variables in the startup files of your shell.                      "
    echo "                                                                     "
    echo "              $ <GNUmake_cmd> toolchain && cd ..                     "
    echo "                                                                     "
    echo "====================================================================="
    exit 1
fi

# MaKL preamble
. ${MAKL_DIR}/cf/makl.init

# Preprocess arguments
makl_args_init "$@"

# Custom arguments ...
makl_args_def   "enable_debug"      "" ""   "enables debugging"
makl_args_def   "enable_profile"    "" ""   "enables profiling"
makl_args_def   "enable_sup_fs"     "" ""   "enables filesystem web access"
makl_args_def   "enable_warns"      "" ""   "set CFLAGS for extra warnings"
# ... and their handlers
__makl_enable_debug ()      { makl_add_var_mk   "CFLAGS" "-g" ; }
__makl_enable_profile ()    { makl_add_var_mk   "CFLAGS" "-pg -a" ; }
__makl_enable_sup_fs ()     { makl_set_var_h    "ENABLE_SUP_FS" ; }
__makl_enable_warns ()        
{ 
    makl_add_var_mk "CFLAGS" "-W -Wall -Wstrict-prototypes -Wmissing-prototypes"
    makl_add_var_mk "CFLAGS" "-Wpointer-arith -Wno-uninitialized -Wreturn-type"
    makl_add_var_mk "CFLAGS" "-Wwrite-strings -Wswitch -Wshadow -Wwrite-strings"
    makl_add_var_mk "CFLAGS" "-Wunreachable-code -Wunused -Wcast-qual"
}

# General settings
makl_pkg_name           "klone"
makl_pkg_version

# Source directory 
makl_set_var_mk         "SRCDIR"    "`pwd`"

# Add local 3rd party flags
makl_add_var_mk         "CFLAGS"    "-I`pwd`/libu"

case `makl_os_name` in

    *mingw* | *MINGW*)
        makl_set_var        "OS_WIN"
        makl_add_var_mk     "WIN_LDFLAGS"      "-lwsock32 -L/c/WINDOWS" 
        ;;

    *)
        makl_set_var        "OS_UNIX"
        ;;
esac

makl_add_var_mk "CFLAGS" "-I`pwd` -O2 -std=c99 -pedantic -DHAVE_CONF_H"

# Install headers in a private subdir
makl_add_var_mk "INCDIR" "\${DESTDIR}/include/klone"

# check for stdint header
makl_checkheader        1   "stdint"    "<stdint.h>"

# Library dependencies
makl_optional           1   "lib"   "openssl"   ""  "-lssl -lcrypto"
makl_optional           1   "lib"   "z"

# Function dependencies
makl_checktype          0   "pid_t"     "<sys/types.h>" 
makl_checkfunc          0   "syslog"

# Binary dependencies
makl_optional           1    "featx"   "doxygen"    "PATH_DOXYGEN"

# Handle command-line arguments
makl_args_handle "$@"

. ${MAKL_DIR}/cf/makl.term
