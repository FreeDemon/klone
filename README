
 features
----------
- c/c++ web pages
- easy webapp-creation for embedded systems
- all inclusive MULTIPLATFORM (WINDOWS, *nix) Single executable file containing:
    + web server (or CGI to plug into other CGI-compliant web servers)
    + compressed configuration
    + compressed static content (you may choose which MIME type to compress)
    + compressed static blocks of dynamic web pages 
- linkable to thousands of C/C++ libs
- embeddable dynamic web pages
- embeddable configuration
- integrated web server (fork or thread based)
- may seamlessy work as a CGI without recompiling and without conf. changes
- compresses static embedded content based on MIME type 
  (conf. file, *.html, etc.)
- compresses static content of dynamic pages
- easy development cycle
- straightforward functions to handle GET/POST variables, cookies, server side 
  sessions, webapp configuration files and more
- server side scheduled HTTP requests (for ex. to trigger a DB update, to 
  import a file into the DB, etc.)
- secure
- fully configurable
- source code available
- support HTTP 1.x
- complete documentation
- GPL license for free project, commercial license when needed
- expert support available

- *** SSL support
- *** C++ support

- *** simple helper classes for html output (tables, forms, etc.)


 todo
----------

first release:

- site/../../../etc/passwd
- Content-Type: application/x-www-form-urlencoded

- session locking (one one script can access a session at a time)
- is locking needed somewhere?
- rd_filter and wr_filter

- sessions
- server -f /path/to/config.file
- DISABLE FILE SYSTEM ACCESS!
- multipart/form-data (rfc1867)
- If-Modified-Since field

- properly set CONFIG_FORK or CONFIG_THREAD

- var_t ?
    + query_args
    + cookie
    + session vars

- options
    + open/run a web page every N seconds
    + item to override compressed flag on mime types
    + client connection timeout
    + server process exit timeout
    + max client number (with default value)
    + server uid/gid
    + additional extension to MIME types mapping
    + default MIME type (apache defaults to text/plain)
    + log method: syslog, internal
    + connection log filename
    + application log filename (debug, info, warnings, error, crit, alarm)
    + Alias, ScriptAlias

- config 
    + cmd line to override config values
    + {} indenting support 
    + embedded config file 
    + config variables (alias /dir ${server.doc_root}/ab/dir)
    + comma separated config value list

- cgi mode
    + strip HTTP_ header fields prefix

- deamonize
- request narg, args
- cookie, session
- pthread server
- drop priviledges
- fix #line (flex/bison)
- field param_t
- grep -r FIXME *
- testing strings url enc/decoding

1.0:
- const char cvsid[] = "$Id: README,v 1.1.1.1 2005/09/09 15:25:43 tat Exp $";
- copyright info
- easy authentication method.
    embedded user/pwd, file based user/pwd, write password into the server 
    executable; i.e. reserve some bytes into a fake variable block:
    static const char passwords[1024] = { "header block for easy lookup" }
- server.pid file
- inetd (if fd 0/1/2 are sockets then assume inetd)
- http authentication
- server side scheduled HTTP requests
- ssl

2.0:
- service unix socket for stats, runtime info, debug, ecc. 
- growable io_mem_t (i.e. io_write will expand the buffer like a file would do)
- c++ bindings
- FTP, TFTP servers
- encrypt embedded pages based
- open browser at startup (multiplatform)
- sup_emb as embedded apache module

 design
-----------
translator:
    from .chx to .c (or any other source code [modules])

compiler:
    from *.c to *.o

linker to generate a dynamically loadable object:
    - from *.o to *.so
    - all *.o to the same *.so

linker to generate a cgi:
    - all *.o to cgi.exe (http://ip/cgi.bin)

linker to generate a web server:
    - all *.o to server.exe (http://ip/)

loader (load and execute *.so):
    + cgi
    + sapi (web server plugin that handles *.so)
    + cmd line prog ($ run /path/to/dir/file.cxo)

 running modes
----------------
- side by side with a webserver (http://ip/server_root/dir/*.cxh):
    + translate each *.cxh to *.c
    + compile *.c to *.o
    + link *.o to *.so
    + load *.so
    + run exported __run

    # make -f Makefile.platform file.so
     o
    # cmake file.so

- drop-in cgi (http://ip/server_root/cgi-bin/my-site)
    + translate ALL *.cxh to *.c
    + compile ALL *.c to *.o
    + link ALL *.o and the CGI stub to my-site.exe

    # make -f Makefile.platform cgi
    
- with the embedded web server (http://ip)
    + translate ALL *.cxh, html, images, etc. to *.c
    + compile ALL *.c to *.o
    + compile webserver cofig file to *.h
    + link ALL *.o and the web server stub to server.exe

    # make -f Makefile.platform webserver

